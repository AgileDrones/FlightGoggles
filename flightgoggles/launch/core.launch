<launch>
  <!-- Launch settings. To be passed into launch file. -->
  <arg name="use_dynamics" default="1" />
  <arg name="use_external_renderer" default="0" />
  <arg name="ignore_collisions" default="false" />
  <arg name="render_stereo" default="0" />
  <arg name="gate_locations" default=""/>
  <arg name="render_quality" default="5"/> <!-- Quality between 0-5 -->
  <arg name="world_frame" default="world/ned"/>
  <arg name="body_frame" default="uav/imu"/>
  <arg name="sensor_package" default="simulationSensors"/>

  <group ns="/uav">

    <!-- Use clock scaling by default. Can be disabled using drone.yaml config. -->
    <param name="/use_sim_time" value="true" />

    <param name="/uav/camera/render_stereo" value="$(arg render_stereo)" />
   
    <!-- Read required config files" / --> 
    <rosparam command="load" file="$(find flightgoggles)/config/drone/drone.yaml"/>
    <rosparam command="load" file="$(find flightgoggles)/config/challenges/nominal_gate_locations.yaml"/>

    <!-- Load static transforms for sensors -->
    <include file="$(find flightgoggles)/config/sensors/$(arg sensor_package).xml">
      <arg name="render_stereo" value="$(arg render_stereo)"/>
    </include>

    <!-- flightgoggles_uav_dynamics simulator -->
    <!--Will not be run if playing back previous flight from rosbag-->
    <node name="flightgoggles_uav_dynamics" pkg="flightgoggles_uav_dynamics" type="node"
          if="$(arg use_dynamics)" output="screen">
      <param name="ignore_collisions" type="bool" value="$(arg ignore_collisions)" />
    </node>

    <!-- FlightGoggles Renderer -->
    <!-- Only run renderer if not using external renderer -->
    <group unless="$(arg use_external_renderer)">
        <node name="flightgogglesRenderer" pkg="flightgoggles" type="FlightGoggles.x86_64" if="$(eval gate_locations == '')" respawn="true"
        args="-screen-quality $(arg render_quality)"/>
        <!-- Perturb gate locations if needed -->
        <node name="flightgogglesRenderer" pkg="flightgoggles" type="FlightGoggles.x86_64" unless="$(eval gate_locations == '')" respawn="true"
        args="-screen-quality $(arg render_quality) -obstacle-perturbation-file '$(find flightgoggles)/config/perturbations/perturbed_gates_$(arg gate_locations).yaml'"/>
    </group>
    

    <!-- FlightGoggles ROS Bridge -->
    <node name="flightgoggles_ros_bridge" pkg="flightgoggles_ros_bridge" type="ROSClient" output="screen" >
    <param name="render_stereo" type="bool" value="$(arg render_stereo)" />
    </node>

    <!-- FlightGoggles IR Marker visualizer -->
    <node name="flightgoggles_marker_visualizer" pkg="flightgoggles_marker_visualizer" type="flightgoggles_marker_visualizer" />

    <!--Run RVIZ for visualization-->
    <node type="rviz" name="rviz" pkg="rviz" args="-d $(find flightgoggles)/rviz/third_person_drone_follower.rviz" unless="$(arg render_stereo)"/>
    <node type="rviz" name="rviz" pkg="rviz" args="-d $(find flightgoggles)/rviz/third_person_drone_follower_stereo.rviz" if="$(arg render_stereo)"/>

    <!--Run rqt_plot for plotting readings from the laser range finder-->
    <!-- <node type="rqt_plot" name="laser_rangefinder_plotter" pkg="rqt_plot" args="topics /uav/sensors/downward_laser_rangefinder/range"/> -->


    <param name="/uav/flightgoggles_ros_bridge/world_frame" value="$(arg world_frame)"/> 
    <param name="/uav/flightgoggles_ros_bridge/body_frame" value="$(arg body_frame)"/> 
  </group>
</launch>
