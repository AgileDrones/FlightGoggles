/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

using System;
using System.Collections.Generic;
using System.IO;
using LCM.LCM;
 
namespace agile
{
    public sealed class graph_t : LCM.LCM.LCMEncodable
    {
        public long utime;
        public long timestampSensor;
        public short numFactors;
        public short[] factorType;
        public double[] factorError;
        public short[] smartFactorType;
        public short numGraphKeys;
        public short[] graphKeys;
        public long[] graphTimestamps;
        public short[] numFactorKeys;
        public short[,] factorKeys;
 
        public graph_t()
        {
        }
 
        public static readonly ulong LCM_FINGERPRINT;
        public static readonly ulong LCM_FINGERPRINT_BASE = 0xc084661baf20ae4fL;
 
        static graph_t()
        {
            LCM_FINGERPRINT = _hashRecursive(new List<String>());
        }
 
        public static ulong _hashRecursive(List<String> classes)
        {
            if (classes.Contains("agile.graph_t"))
                return 0L;
 
            classes.Add("agile.graph_t");
            ulong hash = LCM_FINGERPRINT_BASE
                ;
            classes.RemoveAt(classes.Count - 1);
            return (hash<<1) + ((hash>>63)&1);
        }
 
        public void Encode(LCMDataOutputStream outs)
        {
            outs.Write((long) LCM_FINGERPRINT);
            _encodeRecursive(outs);
        }
 
        public void _encodeRecursive(LCMDataOutputStream outs)
        {
            outs.Write(this.utime); 
 
            outs.Write(this.timestampSensor); 
 
            outs.Write(this.numFactors); 
 
            for (int a = 0; a < this.numFactors; a++) {
                outs.Write(this.factorType[a]); 
            }
 
            for (int a = 0; a < this.numFactors; a++) {
                outs.Write(this.factorError[a]); 
            }
 
            for (int a = 0; a < this.numFactors; a++) {
                outs.Write(this.smartFactorType[a]); 
            }
 
            outs.Write(this.numGraphKeys); 
 
            for (int a = 0; a < this.numGraphKeys; a++) {
                outs.Write(this.graphKeys[a]); 
            }
 
            for (int a = 0; a < this.numGraphKeys; a++) {
                outs.Write(this.graphTimestamps[a]); 
            }
 
            for (int a = 0; a < this.numFactors; a++) {
                outs.Write(this.numFactorKeys[a]); 
            }
 
            for (int a = 0; a < this.numFactors; a++) {
                for (int b = 0; b < this.numGraphKeys; b++) {
                    outs.Write(this.factorKeys[a,b]); 
                }
            }
 
        }
 
        public graph_t(byte[] data) : this(new LCMDataInputStream(data))
        {
        }
 
        public graph_t(LCMDataInputStream ins)
        {
            if ((ulong) ins.ReadInt64() != LCM_FINGERPRINT)
                throw new System.IO.IOException("LCM Decode error: bad fingerprint");
 
            _decodeRecursive(ins);
        }
 
        public static agile.graph_t _decodeRecursiveFactory(LCMDataInputStream ins)
        {
            agile.graph_t o = new agile.graph_t();
            o._decodeRecursive(ins);
            return o;
        }
 
        public void _decodeRecursive(LCMDataInputStream ins)
        {
            this.utime = ins.ReadInt64();
 
            this.timestampSensor = ins.ReadInt64();
 
            this.numFactors = ins.ReadInt16();
 
            this.factorType = new short[(int) numFactors];
            for (int a = 0; a < this.numFactors; a++) {
                this.factorType[a] = ins.ReadInt16();
            }
 
            this.factorError = new double[(int) numFactors];
            for (int a = 0; a < this.numFactors; a++) {
                this.factorError[a] = ins.ReadDouble();
            }
 
            this.smartFactorType = new short[(int) numFactors];
            for (int a = 0; a < this.numFactors; a++) {
                this.smartFactorType[a] = ins.ReadInt16();
            }
 
            this.numGraphKeys = ins.ReadInt16();
 
            this.graphKeys = new short[(int) numGraphKeys];
            for (int a = 0; a < this.numGraphKeys; a++) {
                this.graphKeys[a] = ins.ReadInt16();
            }
 
            this.graphTimestamps = new long[(int) numGraphKeys];
            for (int a = 0; a < this.numGraphKeys; a++) {
                this.graphTimestamps[a] = ins.ReadInt64();
            }
 
            this.numFactorKeys = new short[(int) numFactors];
            for (int a = 0; a < this.numFactors; a++) {
                this.numFactorKeys[a] = ins.ReadInt16();
            }
 
            this.factorKeys = new short[(int) numFactors,(int) numGraphKeys];
            for (int a = 0; a < this.numFactors; a++) {
                for (int b = 0; b < this.numGraphKeys; b++) {
                    this.factorKeys[a,b] = ins.ReadInt16();
                }
            }
 
        }
 
        public agile.graph_t Copy()
        {
            agile.graph_t outobj = new agile.graph_t();
            outobj.utime = this.utime;
 
            outobj.timestampSensor = this.timestampSensor;
 
            outobj.numFactors = this.numFactors;
 
            outobj.factorType = new short[(int) numFactors];
            for (int a = 0; a < this.numFactors; a++) {
                outobj.factorType[a] = this.factorType[a];
            }
 
            outobj.factorError = new double[(int) numFactors];
            for (int a = 0; a < this.numFactors; a++) {
                outobj.factorError[a] = this.factorError[a];
            }
 
            outobj.smartFactorType = new short[(int) numFactors];
            for (int a = 0; a < this.numFactors; a++) {
                outobj.smartFactorType[a] = this.smartFactorType[a];
            }
 
            outobj.numGraphKeys = this.numGraphKeys;
 
            outobj.graphKeys = new short[(int) numGraphKeys];
            for (int a = 0; a < this.numGraphKeys; a++) {
                outobj.graphKeys[a] = this.graphKeys[a];
            }
 
            outobj.graphTimestamps = new long[(int) numGraphKeys];
            for (int a = 0; a < this.numGraphKeys; a++) {
                outobj.graphTimestamps[a] = this.graphTimestamps[a];
            }
 
            outobj.numFactorKeys = new short[(int) numFactors];
            for (int a = 0; a < this.numFactors; a++) {
                outobj.numFactorKeys[a] = this.numFactorKeys[a];
            }
 
            outobj.factorKeys = new short[(int) numFactors,(int) numGraphKeys];
            for (int a = 0; a < this.numFactors; a++) {
                for (int b = 0; b < this.numGraphKeys; b++) {
                    outobj.factorKeys[a,b] = this.factorKeys[a,b];
                }
            }
 
            return outobj;
        }
    }
}

