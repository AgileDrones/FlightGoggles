/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

using System;
using System.Collections.Generic;
using System.IO;
using LCM.LCM;
 
namespace agile
{
    public sealed class trackerDebug_t : LCM.LCM.LCMEncodable
    {
        public long utime;
        public long totFeatures;
        public long trackedFeatures;
        public long newFeatures;
        public long agedFeatures;
        public long ransacInliers;
        public long ransacOutliers;
        public long ransacIters;
        public double[] ref_versor_sum;
        public double[] cur_versor_sum;
        public short ransacStatus;
        public long triangleTime;
        public long ransacTime;
        public long totalTime;
        public long detectTotalTime;
        public long detectMinTime;
        public long detectCoreTime;
        public long flowTotalTime;
        public long flowMinTime;
        public long flowCoreTime;
 
        public trackerDebug_t()
        {
            ref_versor_sum = new double[3];
            cur_versor_sum = new double[3];
        }
 
        public static readonly ulong LCM_FINGERPRINT;
        public static readonly ulong LCM_FINGERPRINT_BASE = 0xb6dde9a2d5f944e6L;
 
        static trackerDebug_t()
        {
            LCM_FINGERPRINT = _hashRecursive(new List<String>());
        }
 
        public static ulong _hashRecursive(List<String> classes)
        {
            if (classes.Contains("agile.trackerDebug_t"))
                return 0L;
 
            classes.Add("agile.trackerDebug_t");
            ulong hash = LCM_FINGERPRINT_BASE
                ;
            classes.RemoveAt(classes.Count - 1);
            return (hash<<1) + ((hash>>63)&1);
        }
 
        public void Encode(LCMDataOutputStream outs)
        {
            outs.Write((long) LCM_FINGERPRINT);
            _encodeRecursive(outs);
        }
 
        public void _encodeRecursive(LCMDataOutputStream outs)
        {
            outs.Write(this.utime); 
 
            outs.Write(this.totFeatures); 
 
            outs.Write(this.trackedFeatures); 
 
            outs.Write(this.newFeatures); 
 
            outs.Write(this.agedFeatures); 
 
            outs.Write(this.ransacInliers); 
 
            outs.Write(this.ransacOutliers); 
 
            outs.Write(this.ransacIters); 
 
            for (int a = 0; a < 3; a++) {
                outs.Write(this.ref_versor_sum[a]); 
            }
 
            for (int a = 0; a < 3; a++) {
                outs.Write(this.cur_versor_sum[a]); 
            }
 
            outs.Write(this.ransacStatus); 
 
            outs.Write(this.triangleTime); 
 
            outs.Write(this.ransacTime); 
 
            outs.Write(this.totalTime); 
 
            outs.Write(this.detectTotalTime); 
 
            outs.Write(this.detectMinTime); 
 
            outs.Write(this.detectCoreTime); 
 
            outs.Write(this.flowTotalTime); 
 
            outs.Write(this.flowMinTime); 
 
            outs.Write(this.flowCoreTime); 
 
        }
 
        public trackerDebug_t(byte[] data) : this(new LCMDataInputStream(data))
        {
        }
 
        public trackerDebug_t(LCMDataInputStream ins)
        {
            if ((ulong) ins.ReadInt64() != LCM_FINGERPRINT)
                throw new System.IO.IOException("LCM Decode error: bad fingerprint");
 
            _decodeRecursive(ins);
        }
 
        public static agile.trackerDebug_t _decodeRecursiveFactory(LCMDataInputStream ins)
        {
            agile.trackerDebug_t o = new agile.trackerDebug_t();
            o._decodeRecursive(ins);
            return o;
        }
 
        public void _decodeRecursive(LCMDataInputStream ins)
        {
            this.utime = ins.ReadInt64();
 
            this.totFeatures = ins.ReadInt64();
 
            this.trackedFeatures = ins.ReadInt64();
 
            this.newFeatures = ins.ReadInt64();
 
            this.agedFeatures = ins.ReadInt64();
 
            this.ransacInliers = ins.ReadInt64();
 
            this.ransacOutliers = ins.ReadInt64();
 
            this.ransacIters = ins.ReadInt64();
 
            this.ref_versor_sum = new double[(int) 3];
            for (int a = 0; a < 3; a++) {
                this.ref_versor_sum[a] = ins.ReadDouble();
            }
 
            this.cur_versor_sum = new double[(int) 3];
            for (int a = 0; a < 3; a++) {
                this.cur_versor_sum[a] = ins.ReadDouble();
            }
 
            this.ransacStatus = ins.ReadInt16();
 
            this.triangleTime = ins.ReadInt64();
 
            this.ransacTime = ins.ReadInt64();
 
            this.totalTime = ins.ReadInt64();
 
            this.detectTotalTime = ins.ReadInt64();
 
            this.detectMinTime = ins.ReadInt64();
 
            this.detectCoreTime = ins.ReadInt64();
 
            this.flowTotalTime = ins.ReadInt64();
 
            this.flowMinTime = ins.ReadInt64();
 
            this.flowCoreTime = ins.ReadInt64();
 
        }
 
        public agile.trackerDebug_t Copy()
        {
            agile.trackerDebug_t outobj = new agile.trackerDebug_t();
            outobj.utime = this.utime;
 
            outobj.totFeatures = this.totFeatures;
 
            outobj.trackedFeatures = this.trackedFeatures;
 
            outobj.newFeatures = this.newFeatures;
 
            outobj.agedFeatures = this.agedFeatures;
 
            outobj.ransacInliers = this.ransacInliers;
 
            outobj.ransacOutliers = this.ransacOutliers;
 
            outobj.ransacIters = this.ransacIters;
 
            outobj.ref_versor_sum = new double[(int) 3];
            for (int a = 0; a < 3; a++) {
                outobj.ref_versor_sum[a] = this.ref_versor_sum[a];
            }
 
            outobj.cur_versor_sum = new double[(int) 3];
            for (int a = 0; a < 3; a++) {
                outobj.cur_versor_sum[a] = this.cur_versor_sum[a];
            }
 
            outobj.ransacStatus = this.ransacStatus;
 
            outobj.triangleTime = this.triangleTime;
 
            outobj.ransacTime = this.ransacTime;
 
            outobj.totalTime = this.totalTime;
 
            outobj.detectTotalTime = this.detectTotalTime;
 
            outobj.detectMinTime = this.detectMinTime;
 
            outobj.detectCoreTime = this.detectCoreTime;
 
            outobj.flowTotalTime = this.flowTotalTime;
 
            outobj.flowMinTime = this.flowMinTime;
 
            outobj.flowCoreTime = this.flowCoreTime;
 
            return outobj;
        }
    }
}

