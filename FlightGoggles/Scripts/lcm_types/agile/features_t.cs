/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

using System;
using System.Collections.Generic;
using System.IO;
using LCM.LCM;
 
namespace agile
{
    public sealed class features_t : LCM.LCM.LCMEncodable
    {
        public long utime;
        public long timestampCamera;
        public short featuresNrFound;
        public double disparity;
        public short[] featureId;
        public double[,] pixelLocation;
        public double[,] featureDirectionVersor;
 
        public features_t()
        {
        }
 
        public static readonly ulong LCM_FINGERPRINT;
        public static readonly ulong LCM_FINGERPRINT_BASE = 0xc201414b7a9695caL;
 
        static features_t()
        {
            LCM_FINGERPRINT = _hashRecursive(new List<String>());
        }
 
        public static ulong _hashRecursive(List<String> classes)
        {
            if (classes.Contains("agile.features_t"))
                return 0L;
 
            classes.Add("agile.features_t");
            ulong hash = LCM_FINGERPRINT_BASE
                ;
            classes.RemoveAt(classes.Count - 1);
            return (hash<<1) + ((hash>>63)&1);
        }
 
        public void Encode(LCMDataOutputStream outs)
        {
            outs.Write((long) LCM_FINGERPRINT);
            _encodeRecursive(outs);
        }
 
        public void _encodeRecursive(LCMDataOutputStream outs)
        {
            outs.Write(this.utime); 
 
            outs.Write(this.timestampCamera); 
 
            outs.Write(this.featuresNrFound); 
 
            outs.Write(this.disparity); 
 
            for (int a = 0; a < this.featuresNrFound; a++) {
                outs.Write(this.featureId[a]); 
            }
 
            for (int a = 0; a < this.featuresNrFound; a++) {
                for (int b = 0; b < 2; b++) {
                    outs.Write(this.pixelLocation[a,b]); 
                }
            }
 
            for (int a = 0; a < this.featuresNrFound; a++) {
                for (int b = 0; b < 3; b++) {
                    outs.Write(this.featureDirectionVersor[a,b]); 
                }
            }
 
        }
 
        public features_t(byte[] data) : this(new LCMDataInputStream(data))
        {
        }
 
        public features_t(LCMDataInputStream ins)
        {
            if ((ulong) ins.ReadInt64() != LCM_FINGERPRINT)
                throw new System.IO.IOException("LCM Decode error: bad fingerprint");
 
            _decodeRecursive(ins);
        }
 
        public static agile.features_t _decodeRecursiveFactory(LCMDataInputStream ins)
        {
            agile.features_t o = new agile.features_t();
            o._decodeRecursive(ins);
            return o;
        }
 
        public void _decodeRecursive(LCMDataInputStream ins)
        {
            this.utime = ins.ReadInt64();
 
            this.timestampCamera = ins.ReadInt64();
 
            this.featuresNrFound = ins.ReadInt16();
 
            this.disparity = ins.ReadDouble();
 
            this.featureId = new short[(int) featuresNrFound];
            for (int a = 0; a < this.featuresNrFound; a++) {
                this.featureId[a] = ins.ReadInt16();
            }
 
            this.pixelLocation = new double[(int) featuresNrFound,(int) 2];
            for (int a = 0; a < this.featuresNrFound; a++) {
                for (int b = 0; b < 2; b++) {
                    this.pixelLocation[a,b] = ins.ReadDouble();
                }
            }
 
            this.featureDirectionVersor = new double[(int) featuresNrFound,(int) 3];
            for (int a = 0; a < this.featuresNrFound; a++) {
                for (int b = 0; b < 3; b++) {
                    this.featureDirectionVersor[a,b] = ins.ReadDouble();
                }
            }
 
        }
 
        public agile.features_t Copy()
        {
            agile.features_t outobj = new agile.features_t();
            outobj.utime = this.utime;
 
            outobj.timestampCamera = this.timestampCamera;
 
            outobj.featuresNrFound = this.featuresNrFound;
 
            outobj.disparity = this.disparity;
 
            outobj.featureId = new short[(int) featuresNrFound];
            for (int a = 0; a < this.featuresNrFound; a++) {
                outobj.featureId[a] = this.featureId[a];
            }
 
            outobj.pixelLocation = new double[(int) featuresNrFound,(int) 2];
            for (int a = 0; a < this.featuresNrFound; a++) {
                for (int b = 0; b < 2; b++) {
                    outobj.pixelLocation[a,b] = this.pixelLocation[a,b];
                }
            }
 
            outobj.featureDirectionVersor = new double[(int) featuresNrFound,(int) 3];
            for (int a = 0; a < this.featuresNrFound; a++) {
                for (int b = 0; b < 3; b++) {
                    outobj.featureDirectionVersor[a,b] = this.featureDirectionVersor[a,b];
                }
            }
 
            return outobj;
        }
    }
}

