/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

using System;
using System.Collections.Generic;
using System.IO;
using LCM.LCM;
 
namespace agile
{
    public sealed class flatTrajectory_t : LCM.LCM.LCMEncodable
    {
        public long utime;
        public long startTime;
        public short numPolyCoeff;
        public short numPoly;
        public double[] trajTime;
        public double[,,] poly;
 
        public flatTrajectory_t()
        {
        }
 
        public static readonly ulong LCM_FINGERPRINT;
        public static readonly ulong LCM_FINGERPRINT_BASE = 0x0d8802683853935cL;
 
        static flatTrajectory_t()
        {
            LCM_FINGERPRINT = _hashRecursive(new List<String>());
        }
 
        public static ulong _hashRecursive(List<String> classes)
        {
            if (classes.Contains("agile.flatTrajectory_t"))
                return 0L;
 
            classes.Add("agile.flatTrajectory_t");
            ulong hash = LCM_FINGERPRINT_BASE
                ;
            classes.RemoveAt(classes.Count - 1);
            return (hash<<1) + ((hash>>63)&1);
        }
 
        public void Encode(LCMDataOutputStream outs)
        {
            outs.Write((long) LCM_FINGERPRINT);
            _encodeRecursive(outs);
        }
 
        public void _encodeRecursive(LCMDataOutputStream outs)
        {
            outs.Write(this.utime); 
 
            outs.Write(this.startTime); 
 
            outs.Write(this.numPolyCoeff); 
 
            outs.Write(this.numPoly); 
 
            for (int a = 0; a < this.numPoly; a++) {
                outs.Write(this.trajTime[a]); 
            }
 
            for (int a = 0; a < 4; a++) {
                for (int b = 0; b < this.numPoly; b++) {
                    for (int c = 0; c < this.numPolyCoeff; c++) {
                        outs.Write(this.poly[a,b,c]); 
                    }
                }
            }
 
        }
 
        public flatTrajectory_t(byte[] data) : this(new LCMDataInputStream(data))
        {
        }
 
        public flatTrajectory_t(LCMDataInputStream ins)
        {
            if ((ulong) ins.ReadInt64() != LCM_FINGERPRINT)
                throw new System.IO.IOException("LCM Decode error: bad fingerprint");
 
            _decodeRecursive(ins);
        }
 
        public static agile.flatTrajectory_t _decodeRecursiveFactory(LCMDataInputStream ins)
        {
            agile.flatTrajectory_t o = new agile.flatTrajectory_t();
            o._decodeRecursive(ins);
            return o;
        }
 
        public void _decodeRecursive(LCMDataInputStream ins)
        {
            this.utime = ins.ReadInt64();
 
            this.startTime = ins.ReadInt64();
 
            this.numPolyCoeff = ins.ReadInt16();
 
            this.numPoly = ins.ReadInt16();
 
            this.trajTime = new double[(int) numPoly];
            for (int a = 0; a < this.numPoly; a++) {
                this.trajTime[a] = ins.ReadDouble();
            }
 
            this.poly = new double[(int) 4,(int) numPoly,(int) numPolyCoeff];
            for (int a = 0; a < 4; a++) {
                for (int b = 0; b < this.numPoly; b++) {
                    for (int c = 0; c < this.numPolyCoeff; c++) {
                        this.poly[a,b,c] = ins.ReadDouble();
                    }
                }
            }
 
        }
 
        public agile.flatTrajectory_t Copy()
        {
            agile.flatTrajectory_t outobj = new agile.flatTrajectory_t();
            outobj.utime = this.utime;
 
            outobj.startTime = this.startTime;
 
            outobj.numPolyCoeff = this.numPolyCoeff;
 
            outobj.numPoly = this.numPoly;
 
            outobj.trajTime = new double[(int) numPoly];
            for (int a = 0; a < this.numPoly; a++) {
                outobj.trajTime[a] = this.trajTime[a];
            }
 
            outobj.poly = new double[(int) 4,(int) numPoly,(int) numPolyCoeff];
            for (int a = 0; a < 4; a++) {
                for (int b = 0; b < this.numPoly; b++) {
                    for (int c = 0; c < this.numPolyCoeff; c++) {
                        outobj.poly[a,b,c] = this.poly[a,b,c];
                    }
                }
            }
 
            return outobj;
        }
    }
}

