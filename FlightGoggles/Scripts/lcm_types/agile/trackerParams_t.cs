/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

using System;
using System.Collections.Generic;
using System.IO;
using LCM.LCM;
 
namespace agile
{
    public sealed class trackerParams_t : LCM.LCM.LCMEncodable
    {
        public long utime;
        public double ransacThreshold;
        public double ransacProbability;
        public long ransacMaxIterations;
        public int compression;
        public long featPerFrame;
        public double featureQuality;
        public double minDistance;
        public long blockSize;
        public double k;
        public long kltWindowSize;
        public long kltMaxIter;
        public double kltEpsilon;
        public long minKeyframeTime;
        public long maxKeyframeTime;
        public double disparityKeyframeThresh;
        public long minFeaturesKeyframe;
        public double maxAge;
 
        public trackerParams_t()
        {
        }
 
        public static readonly ulong LCM_FINGERPRINT;
        public static readonly ulong LCM_FINGERPRINT_BASE = 0xeb78c384ec4bd69bL;
 
        static trackerParams_t()
        {
            LCM_FINGERPRINT = _hashRecursive(new List<String>());
        }
 
        public static ulong _hashRecursive(List<String> classes)
        {
            if (classes.Contains("agile.trackerParams_t"))
                return 0L;
 
            classes.Add("agile.trackerParams_t");
            ulong hash = LCM_FINGERPRINT_BASE
                ;
            classes.RemoveAt(classes.Count - 1);
            return (hash<<1) + ((hash>>63)&1);
        }
 
        public void Encode(LCMDataOutputStream outs)
        {
            outs.Write((long) LCM_FINGERPRINT);
            _encodeRecursive(outs);
        }
 
        public void _encodeRecursive(LCMDataOutputStream outs)
        {
            outs.Write(this.utime); 
 
            outs.Write(this.ransacThreshold); 
 
            outs.Write(this.ransacProbability); 
 
            outs.Write(this.ransacMaxIterations); 
 
            outs.Write(this.compression); 
 
            outs.Write(this.featPerFrame); 
 
            outs.Write(this.featureQuality); 
 
            outs.Write(this.minDistance); 
 
            outs.Write(this.blockSize); 
 
            outs.Write(this.k); 
 
            outs.Write(this.kltWindowSize); 
 
            outs.Write(this.kltMaxIter); 
 
            outs.Write(this.kltEpsilon); 
 
            outs.Write(this.minKeyframeTime); 
 
            outs.Write(this.maxKeyframeTime); 
 
            outs.Write(this.disparityKeyframeThresh); 
 
            outs.Write(this.minFeaturesKeyframe); 
 
            outs.Write(this.maxAge); 
 
        }
 
        public trackerParams_t(byte[] data) : this(new LCMDataInputStream(data))
        {
        }
 
        public trackerParams_t(LCMDataInputStream ins)
        {
            if ((ulong) ins.ReadInt64() != LCM_FINGERPRINT)
                throw new System.IO.IOException("LCM Decode error: bad fingerprint");
 
            _decodeRecursive(ins);
        }
 
        public static agile.trackerParams_t _decodeRecursiveFactory(LCMDataInputStream ins)
        {
            agile.trackerParams_t o = new agile.trackerParams_t();
            o._decodeRecursive(ins);
            return o;
        }
 
        public void _decodeRecursive(LCMDataInputStream ins)
        {
            this.utime = ins.ReadInt64();
 
            this.ransacThreshold = ins.ReadDouble();
 
            this.ransacProbability = ins.ReadDouble();
 
            this.ransacMaxIterations = ins.ReadInt64();
 
            this.compression = ins.ReadInt32();
 
            this.featPerFrame = ins.ReadInt64();
 
            this.featureQuality = ins.ReadDouble();
 
            this.minDistance = ins.ReadDouble();
 
            this.blockSize = ins.ReadInt64();
 
            this.k = ins.ReadDouble();
 
            this.kltWindowSize = ins.ReadInt64();
 
            this.kltMaxIter = ins.ReadInt64();
 
            this.kltEpsilon = ins.ReadDouble();
 
            this.minKeyframeTime = ins.ReadInt64();
 
            this.maxKeyframeTime = ins.ReadInt64();
 
            this.disparityKeyframeThresh = ins.ReadDouble();
 
            this.minFeaturesKeyframe = ins.ReadInt64();
 
            this.maxAge = ins.ReadDouble();
 
        }
 
        public agile.trackerParams_t Copy()
        {
            agile.trackerParams_t outobj = new agile.trackerParams_t();
            outobj.utime = this.utime;
 
            outobj.ransacThreshold = this.ransacThreshold;
 
            outobj.ransacProbability = this.ransacProbability;
 
            outobj.ransacMaxIterations = this.ransacMaxIterations;
 
            outobj.compression = this.compression;
 
            outobj.featPerFrame = this.featPerFrame;
 
            outobj.featureQuality = this.featureQuality;
 
            outobj.minDistance = this.minDistance;
 
            outobj.blockSize = this.blockSize;
 
            outobj.k = this.k;
 
            outobj.kltWindowSize = this.kltWindowSize;
 
            outobj.kltMaxIter = this.kltMaxIter;
 
            outobj.kltEpsilon = this.kltEpsilon;
 
            outobj.minKeyframeTime = this.minKeyframeTime;
 
            outobj.maxKeyframeTime = this.maxKeyframeTime;
 
            outobj.disparityKeyframeThresh = this.disparityKeyframeThresh;
 
            outobj.minFeaturesKeyframe = this.minFeaturesKeyframe;
 
            outobj.maxAge = this.maxAge;
 
            return outobj;
        }
    }
}

