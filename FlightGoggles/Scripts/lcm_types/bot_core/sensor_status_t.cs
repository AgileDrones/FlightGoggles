/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

using System;
using System.Collections.Generic;
using System.IO;
using LCM.LCM;
 
namespace bot_core
{
    public sealed class sensor_status_t : LCM.LCM.LCMEncodable
    {
        public long utime;
        public String sensor_name;
        public double rate;
        public short type;
 
        public sensor_status_t()
        {
        }
 
        public static readonly ulong LCM_FINGERPRINT;
        public static readonly ulong LCM_FINGERPRINT_BASE = 0x915ec758cf41a556L;
 
        public const int VELODYNE_32 = 0;
        public const int VELODYNE_64 = 1;
        public const int SICK_LASER = 2;
        public const int HOKUYO_LASER = 3;
        public const int KINECT = 4;
        public const int IMU = 5;
        public const int ORC = 6;
        public const int DYNAMIXEL_SERVO = 7;

        static sensor_status_t()
        {
            LCM_FINGERPRINT = _hashRecursive(new List<String>());
        }
 
        public static ulong _hashRecursive(List<String> classes)
        {
            if (classes.Contains("bot_core.sensor_status_t"))
                return 0L;
 
            classes.Add("bot_core.sensor_status_t");
            ulong hash = LCM_FINGERPRINT_BASE
                ;
            classes.RemoveAt(classes.Count - 1);
            return (hash<<1) + ((hash>>63)&1);
        }
 
        public void Encode(LCMDataOutputStream outs)
        {
            outs.Write((long) LCM_FINGERPRINT);
            _encodeRecursive(outs);
        }
 
        public void _encodeRecursive(LCMDataOutputStream outs)
        {
            byte[] __strbuf = null;
            outs.Write(this.utime); 
 
            __strbuf = System.Text.Encoding.GetEncoding("US-ASCII").GetBytes(this.sensor_name); outs.Write(__strbuf.Length+1); outs.Write(__strbuf, 0, __strbuf.Length); outs.Write((byte) 0); 
 
            outs.Write(this.rate); 
 
            outs.Write(this.type); 
 
        }
 
        public sensor_status_t(byte[] data) : this(new LCMDataInputStream(data))
        {
        }
 
        public sensor_status_t(LCMDataInputStream ins)
        {
            if ((ulong) ins.ReadInt64() != LCM_FINGERPRINT)
                throw new System.IO.IOException("LCM Decode error: bad fingerprint");
 
            _decodeRecursive(ins);
        }
 
        public static bot_core.sensor_status_t _decodeRecursiveFactory(LCMDataInputStream ins)
        {
            bot_core.sensor_status_t o = new bot_core.sensor_status_t();
            o._decodeRecursive(ins);
            return o;
        }
 
        public void _decodeRecursive(LCMDataInputStream ins)
        {
            byte[] __strbuf = null;
            this.utime = ins.ReadInt64();
 
            __strbuf = new byte[ins.ReadInt32()-1]; ins.ReadFully(__strbuf); ins.ReadByte(); this.sensor_name = System.Text.Encoding.GetEncoding("US-ASCII").GetString(__strbuf);
 
            this.rate = ins.ReadDouble();
 
            this.type = ins.ReadInt16();
 
        }
 
        public bot_core.sensor_status_t Copy()
        {
            bot_core.sensor_status_t outobj = new bot_core.sensor_status_t();
            outobj.utime = this.utime;
 
            outobj.sensor_name = this.sensor_name;
 
            outobj.rate = this.rate;
 
            outobj.type = this.type;
 
            return outobj;
        }
    }
}

