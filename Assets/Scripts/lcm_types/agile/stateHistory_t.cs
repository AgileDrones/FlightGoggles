/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

using System;
using System.Collections.Generic;
using System.IO;
using LCM.LCM;
 
namespace agile
{
    public sealed class stateHistory_t : LCM.LCM.LCMEncodable
    {
        public long utime;
        public int numState;
        public long[] timestampState;
        public double[,] position;
        public double[,] orient;
        public double[,] veloPositionBody;
        public double[,] imuBiasAccel;
        public double[,] imuBiasGyro;
 
        public stateHistory_t()
        {
        }
 
        public static readonly ulong LCM_FINGERPRINT;
        public static readonly ulong LCM_FINGERPRINT_BASE = 0x2918d71862320fd2L;
 
        static stateHistory_t()
        {
            LCM_FINGERPRINT = _hashRecursive(new List<String>());
        }
 
        public static ulong _hashRecursive(List<String> classes)
        {
            if (classes.Contains("agile.stateHistory_t"))
                return 0L;
 
            classes.Add("agile.stateHistory_t");
            ulong hash = LCM_FINGERPRINT_BASE
                ;
            classes.RemoveAt(classes.Count - 1);
            return (hash<<1) + ((hash>>63)&1);
        }
 
        public void Encode(LCMDataOutputStream outs)
        {
            outs.Write((long) LCM_FINGERPRINT);
            _encodeRecursive(outs);
        }
 
        public void _encodeRecursive(LCMDataOutputStream outs)
        {
            outs.Write(this.utime); 
 
            outs.Write(this.numState); 
 
            for (int a = 0; a < this.numState; a++) {
                outs.Write(this.timestampState[a]); 
            }
 
            for (int a = 0; a < this.numState; a++) {
                for (int b = 0; b < 3; b++) {
                    outs.Write(this.position[a,b]); 
                }
            }
 
            for (int a = 0; a < this.numState; a++) {
                for (int b = 0; b < 4; b++) {
                    outs.Write(this.orient[a,b]); 
                }
            }
 
            for (int a = 0; a < this.numState; a++) {
                for (int b = 0; b < 3; b++) {
                    outs.Write(this.veloPositionBody[a,b]); 
                }
            }
 
            for (int a = 0; a < this.numState; a++) {
                for (int b = 0; b < 3; b++) {
                    outs.Write(this.imuBiasAccel[a,b]); 
                }
            }
 
            for (int a = 0; a < this.numState; a++) {
                for (int b = 0; b < 3; b++) {
                    outs.Write(this.imuBiasGyro[a,b]); 
                }
            }
 
        }
 
        public stateHistory_t(byte[] data) : this(new LCMDataInputStream(data))
        {
        }
 
        public stateHistory_t(LCMDataInputStream ins)
        {
            if ((ulong) ins.ReadInt64() != LCM_FINGERPRINT)
                throw new System.IO.IOException("LCM Decode error: bad fingerprint");
 
            _decodeRecursive(ins);
        }
 
        public static agile.stateHistory_t _decodeRecursiveFactory(LCMDataInputStream ins)
        {
            agile.stateHistory_t o = new agile.stateHistory_t();
            o._decodeRecursive(ins);
            return o;
        }
 
        public void _decodeRecursive(LCMDataInputStream ins)
        {
            this.utime = ins.ReadInt64();
 
            this.numState = ins.ReadInt32();
 
            this.timestampState = new long[(int) numState];
            for (int a = 0; a < this.numState; a++) {
                this.timestampState[a] = ins.ReadInt64();
            }
 
            this.position = new double[(int) numState,(int) 3];
            for (int a = 0; a < this.numState; a++) {
                for (int b = 0; b < 3; b++) {
                    this.position[a,b] = ins.ReadDouble();
                }
            }
 
            this.orient = new double[(int) numState,(int) 4];
            for (int a = 0; a < this.numState; a++) {
                for (int b = 0; b < 4; b++) {
                    this.orient[a,b] = ins.ReadDouble();
                }
            }
 
            this.veloPositionBody = new double[(int) numState,(int) 3];
            for (int a = 0; a < this.numState; a++) {
                for (int b = 0; b < 3; b++) {
                    this.veloPositionBody[a,b] = ins.ReadDouble();
                }
            }
 
            this.imuBiasAccel = new double[(int) numState,(int) 3];
            for (int a = 0; a < this.numState; a++) {
                for (int b = 0; b < 3; b++) {
                    this.imuBiasAccel[a,b] = ins.ReadDouble();
                }
            }
 
            this.imuBiasGyro = new double[(int) numState,(int) 3];
            for (int a = 0; a < this.numState; a++) {
                for (int b = 0; b < 3; b++) {
                    this.imuBiasGyro[a,b] = ins.ReadDouble();
                }
            }
 
        }
 
        public agile.stateHistory_t Copy()
        {
            agile.stateHistory_t outobj = new agile.stateHistory_t();
            outobj.utime = this.utime;
 
            outobj.numState = this.numState;
 
            outobj.timestampState = new long[(int) numState];
            for (int a = 0; a < this.numState; a++) {
                outobj.timestampState[a] = this.timestampState[a];
            }
 
            outobj.position = new double[(int) numState,(int) 3];
            for (int a = 0; a < this.numState; a++) {
                for (int b = 0; b < 3; b++) {
                    outobj.position[a,b] = this.position[a,b];
                }
            }
 
            outobj.orient = new double[(int) numState,(int) 4];
            for (int a = 0; a < this.numState; a++) {
                for (int b = 0; b < 4; b++) {
                    outobj.orient[a,b] = this.orient[a,b];
                }
            }
 
            outobj.veloPositionBody = new double[(int) numState,(int) 3];
            for (int a = 0; a < this.numState; a++) {
                for (int b = 0; b < 3; b++) {
                    outobj.veloPositionBody[a,b] = this.veloPositionBody[a,b];
                }
            }
 
            outobj.imuBiasAccel = new double[(int) numState,(int) 3];
            for (int a = 0; a < this.numState; a++) {
                for (int b = 0; b < 3; b++) {
                    outobj.imuBiasAccel[a,b] = this.imuBiasAccel[a,b];
                }
            }
 
            outobj.imuBiasGyro = new double[(int) numState,(int) 3];
            for (int a = 0; a < this.numState; a++) {
                for (int b = 0; b < 3; b++) {
                    outobj.imuBiasGyro[a,b] = this.imuBiasGyro[a,b];
                }
            }
 
            return outobj;
        }
    }
}

