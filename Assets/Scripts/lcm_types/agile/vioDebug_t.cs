/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

using System;
using System.Collections.Generic;
using System.IO;
using LCM.LCM;
 
namespace agile
{
    public sealed class vioDebug_t : LCM.LCM.LCMEncodable
    {
        public long utime;
        public long numFactors;
        public long numSF;
        public long numIMU;
        public long numNoMotion;
        public long numZeroVelocity;
        public long numNoTranslation;
        public long numForwardOnly;
        public long numDegenerate;
        public long numFarPoints;
        public long numOutliers;
        public long numValid;
        public long numCheirality;
        public double meanTrackLength;
        public long maxTrackLength;
        public double meanPixelError;
        public double maxPixelError;
        public double maxDeltaError;
        public double disparity;
        public short numOptimize;
        public long[] numReeliminated;
        public long[] numRelinearized;
        public long[] numCliques;
 
        public vioDebug_t()
        {
        }
 
        public static readonly ulong LCM_FINGERPRINT;
        public static readonly ulong LCM_FINGERPRINT_BASE = 0x405fd83451a48d74L;
 
        static vioDebug_t()
        {
            LCM_FINGERPRINT = _hashRecursive(new List<String>());
        }
 
        public static ulong _hashRecursive(List<String> classes)
        {
            if (classes.Contains("agile.vioDebug_t"))
                return 0L;
 
            classes.Add("agile.vioDebug_t");
            ulong hash = LCM_FINGERPRINT_BASE
                ;
            classes.RemoveAt(classes.Count - 1);
            return (hash<<1) + ((hash>>63)&1);
        }
 
        public void Encode(LCMDataOutputStream outs)
        {
            outs.Write((long) LCM_FINGERPRINT);
            _encodeRecursive(outs);
        }
 
        public void _encodeRecursive(LCMDataOutputStream outs)
        {
            outs.Write(this.utime); 
 
            outs.Write(this.numFactors); 
 
            outs.Write(this.numSF); 
 
            outs.Write(this.numIMU); 
 
            outs.Write(this.numNoMotion); 
 
            outs.Write(this.numZeroVelocity); 
 
            outs.Write(this.numNoTranslation); 
 
            outs.Write(this.numForwardOnly); 
 
            outs.Write(this.numDegenerate); 
 
            outs.Write(this.numFarPoints); 
 
            outs.Write(this.numOutliers); 
 
            outs.Write(this.numValid); 
 
            outs.Write(this.numCheirality); 
 
            outs.Write(this.meanTrackLength); 
 
            outs.Write(this.maxTrackLength); 
 
            outs.Write(this.meanPixelError); 
 
            outs.Write(this.maxPixelError); 
 
            outs.Write(this.maxDeltaError); 
 
            outs.Write(this.disparity); 
 
            outs.Write(this.numOptimize); 
 
            for (int a = 0; a < this.numOptimize; a++) {
                outs.Write(this.numReeliminated[a]); 
            }
 
            for (int a = 0; a < this.numOptimize; a++) {
                outs.Write(this.numRelinearized[a]); 
            }
 
            for (int a = 0; a < this.numOptimize; a++) {
                outs.Write(this.numCliques[a]); 
            }
 
        }
 
        public vioDebug_t(byte[] data) : this(new LCMDataInputStream(data))
        {
        }
 
        public vioDebug_t(LCMDataInputStream ins)
        {
            if ((ulong) ins.ReadInt64() != LCM_FINGERPRINT)
                throw new System.IO.IOException("LCM Decode error: bad fingerprint");
 
            _decodeRecursive(ins);
        }
 
        public static agile.vioDebug_t _decodeRecursiveFactory(LCMDataInputStream ins)
        {
            agile.vioDebug_t o = new agile.vioDebug_t();
            o._decodeRecursive(ins);
            return o;
        }
 
        public void _decodeRecursive(LCMDataInputStream ins)
        {
            this.utime = ins.ReadInt64();
 
            this.numFactors = ins.ReadInt64();
 
            this.numSF = ins.ReadInt64();
 
            this.numIMU = ins.ReadInt64();
 
            this.numNoMotion = ins.ReadInt64();
 
            this.numZeroVelocity = ins.ReadInt64();
 
            this.numNoTranslation = ins.ReadInt64();
 
            this.numForwardOnly = ins.ReadInt64();
 
            this.numDegenerate = ins.ReadInt64();
 
            this.numFarPoints = ins.ReadInt64();
 
            this.numOutliers = ins.ReadInt64();
 
            this.numValid = ins.ReadInt64();
 
            this.numCheirality = ins.ReadInt64();
 
            this.meanTrackLength = ins.ReadDouble();
 
            this.maxTrackLength = ins.ReadInt64();
 
            this.meanPixelError = ins.ReadDouble();
 
            this.maxPixelError = ins.ReadDouble();
 
            this.maxDeltaError = ins.ReadDouble();
 
            this.disparity = ins.ReadDouble();
 
            this.numOptimize = ins.ReadInt16();
 
            this.numReeliminated = new long[(int) numOptimize];
            for (int a = 0; a < this.numOptimize; a++) {
                this.numReeliminated[a] = ins.ReadInt64();
            }
 
            this.numRelinearized = new long[(int) numOptimize];
            for (int a = 0; a < this.numOptimize; a++) {
                this.numRelinearized[a] = ins.ReadInt64();
            }
 
            this.numCliques = new long[(int) numOptimize];
            for (int a = 0; a < this.numOptimize; a++) {
                this.numCliques[a] = ins.ReadInt64();
            }
 
        }
 
        public agile.vioDebug_t Copy()
        {
            agile.vioDebug_t outobj = new agile.vioDebug_t();
            outobj.utime = this.utime;
 
            outobj.numFactors = this.numFactors;
 
            outobj.numSF = this.numSF;
 
            outobj.numIMU = this.numIMU;
 
            outobj.numNoMotion = this.numNoMotion;
 
            outobj.numZeroVelocity = this.numZeroVelocity;
 
            outobj.numNoTranslation = this.numNoTranslation;
 
            outobj.numForwardOnly = this.numForwardOnly;
 
            outobj.numDegenerate = this.numDegenerate;
 
            outobj.numFarPoints = this.numFarPoints;
 
            outobj.numOutliers = this.numOutliers;
 
            outobj.numValid = this.numValid;
 
            outobj.numCheirality = this.numCheirality;
 
            outobj.meanTrackLength = this.meanTrackLength;
 
            outobj.maxTrackLength = this.maxTrackLength;
 
            outobj.meanPixelError = this.meanPixelError;
 
            outobj.maxPixelError = this.maxPixelError;
 
            outobj.maxDeltaError = this.maxDeltaError;
 
            outobj.disparity = this.disparity;
 
            outobj.numOptimize = this.numOptimize;
 
            outobj.numReeliminated = new long[(int) numOptimize];
            for (int a = 0; a < this.numOptimize; a++) {
                outobj.numReeliminated[a] = this.numReeliminated[a];
            }
 
            outobj.numRelinearized = new long[(int) numOptimize];
            for (int a = 0; a < this.numOptimize; a++) {
                outobj.numRelinearized[a] = this.numRelinearized[a];
            }
 
            outobj.numCliques = new long[(int) numOptimize];
            for (int a = 0; a < this.numOptimize; a++) {
                outobj.numCliques[a] = this.numCliques[a];
            }
 
            return outobj;
        }
    }
}

