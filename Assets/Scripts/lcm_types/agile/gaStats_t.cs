/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

using System;
using System.Collections.Generic;
using System.IO;
using LCM.LCM;
 
namespace agile
{
    public sealed class gaStats_t : LCM.LCM.LCMEncodable
    {
        public long timestamp;
        public short nPop;
        public short nVar;
        public double[,] var;
        public double[] fitness;
 
        public gaStats_t()
        {
        }
 
        public static readonly ulong LCM_FINGERPRINT;
        public static readonly ulong LCM_FINGERPRINT_BASE = 0x4abe975fe5b84922L;
 
        static gaStats_t()
        {
            LCM_FINGERPRINT = _hashRecursive(new List<String>());
        }
 
        public static ulong _hashRecursive(List<String> classes)
        {
            if (classes.Contains("agile.gaStats_t"))
                return 0L;
 
            classes.Add("agile.gaStats_t");
            ulong hash = LCM_FINGERPRINT_BASE
                ;
            classes.RemoveAt(classes.Count - 1);
            return (hash<<1) + ((hash>>63)&1);
        }
 
        public void Encode(LCMDataOutputStream outs)
        {
            outs.Write((long) LCM_FINGERPRINT);
            _encodeRecursive(outs);
        }
 
        public void _encodeRecursive(LCMDataOutputStream outs)
        {
            outs.Write(this.timestamp); 
 
            outs.Write(this.nPop); 
 
            outs.Write(this.nVar); 
 
            for (int a = 0; a < this.nPop; a++) {
                for (int b = 0; b < this.nVar; b++) {
                    outs.Write(this.var[a,b]); 
                }
            }
 
            for (int a = 0; a < this.nPop; a++) {
                outs.Write(this.fitness[a]); 
            }
 
        }
 
        public gaStats_t(byte[] data) : this(new LCMDataInputStream(data))
        {
        }
 
        public gaStats_t(LCMDataInputStream ins)
        {
            if ((ulong) ins.ReadInt64() != LCM_FINGERPRINT)
                throw new System.IO.IOException("LCM Decode error: bad fingerprint");
 
            _decodeRecursive(ins);
        }
 
        public static agile.gaStats_t _decodeRecursiveFactory(LCMDataInputStream ins)
        {
            agile.gaStats_t o = new agile.gaStats_t();
            o._decodeRecursive(ins);
            return o;
        }
 
        public void _decodeRecursive(LCMDataInputStream ins)
        {
            this.timestamp = ins.ReadInt64();
 
            this.nPop = ins.ReadInt16();
 
            this.nVar = ins.ReadInt16();
 
            this.var = new double[(int) nPop,(int) nVar];
            for (int a = 0; a < this.nPop; a++) {
                for (int b = 0; b < this.nVar; b++) {
                    this.var[a,b] = ins.ReadDouble();
                }
            }
 
            this.fitness = new double[(int) nPop];
            for (int a = 0; a < this.nPop; a++) {
                this.fitness[a] = ins.ReadDouble();
            }
 
        }
 
        public agile.gaStats_t Copy()
        {
            agile.gaStats_t outobj = new agile.gaStats_t();
            outobj.timestamp = this.timestamp;
 
            outobj.nPop = this.nPop;
 
            outobj.nVar = this.nVar;
 
            outobj.var = new double[(int) nPop,(int) nVar];
            for (int a = 0; a < this.nPop; a++) {
                for (int b = 0; b < this.nVar; b++) {
                    outobj.var[a,b] = this.var[a,b];
                }
            }
 
            outobj.fitness = new double[(int) nPop];
            for (int a = 0; a < this.nPop; a++) {
                outobj.fitness[a] = this.fitness[a];
            }
 
            return outobj;
        }
    }
}

